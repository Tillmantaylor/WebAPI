@using petStoreMonitoringApp.Models

@model petStoreMonitoringApp.Models.ViewModels.BusinessMetricsVM

@{
    ViewData["Title"] = "Business Metrics";
}
<h1>@ViewData["Title"]</h1>
<head>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.min.js" type="text/javascript"></script>
    <script src="https://code.jquery.com/jquery-1.11.3.min.js"></script>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
</head>
<body>
    <h4 class="text-center">Quantity on hand for merchandise items</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">OnHandMerchId</th>
                <th scope="col">Item ID</th>
                <th scope="col">Item Name</th>
                <th scope="col">Quantity on Hand</th>
                <th scope="col">Date</th>
                <th scope="col">Timestamp</th>
            </tr>
        </thead>
        <tbody>
            @foreach (OnHandMerch item in Model.OnHandMerchList)
            {
                <tr>
                    <th scope="row">@item.OnHandMerchId</th>
                    <td>@item.ItemId</td>
                    <td>[No Item Name]</td>
                    <td>@item.QuantityonHand</td>
                    <td>@item.Date</td>
                    <td>@item.TimeStamp</td>
                </tr>
            }
        </tbody>
    </table>
    <br />
    <h4 class="text-center">Quantity on hand for merchandise items - Chart</h4>
    <div id="chart_div1"></div>

    <script>google.charts.load('current', { packages: ['corechart', 'bar'] });
        google.charts.setOnLoadCallback(drawMaterial);

        function drawMaterial() {
            var data = new google.visualization.DataTable();
            var view_model = @Html.Raw(Json.Serialize(Model.MostRecentOnHandMerch));
            data.addColumn('string', 'Item ID');
            data.addColumn('number', 'Quantity Available');

            for (let i = 0; i < view_model.length; i++) {
                data.addRows([
                    [view_model[i].itemId.toString(), view_model[i].quantityonHand],
                ]);
            }


            var options = {
                title: 'Quantity on hand for merchandise items',
            };

            var materialChart = new google.charts.Bar(document.getElementById('chart_div1'));
            materialChart.draw(data, options);
        }</script>
    <br />
    <br />
    <h4 class="text-center">Number of each category of animal purchased</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Animal Category ID</th>
                <th scope="col">Animal Category</th>
                <th scope="col">Date</th>
                <th scope="col">Timestamp</th>
            </tr>
        </thead>
        <tbody>
            @foreach (AnimalPurchaseCategory item in Model.AnimalPurchaseCategoryList)
            {
                <tr>
                    <th scope="row">@item.AnimalPurchaseCategoryId</th>
                    <td>@item.Category</td>
                    <td>@item.Date</td>
                    <td>@item.TimeStamp</td>
                </tr>
            }
        </tbody>
    </table>
    <br />
    <h4 class="text-center">Number of each category of animal purchased - Chart</h4>
    <div id="chart_div2"></div>

    <script>google.charts.load('current', { packages: ['corechart', 'bar'] });
        google.charts.setOnLoadCallback(drawMaterial);

        function drawMaterial() {
            var data = new google.visualization.DataTable();
            var view_model = @Html.Raw(Json.Serialize(Model.TotalAnimalsInCategoryPurchased));
            data.addColumn('string', 'Animal Category');
            data.addColumn('number', 'Animals Purchased');

            for (const [key, value] of Object.entries(view_model)) {
                data.addRows([
                    [key, value],
                ]);
            }

            var options = {
                title: 'Number of each category of animal purchased',
            };

            var materialChart = new google.charts.Bar(document.getElementById('chart_div2'));
            materialChart.draw(data, options);
        }</script>
    <br />
    <br />
    <h4 class="text-center">State where orders are placed from</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Order State ID</th>
                <th scope="col">State</th>
                <th scope="col">Date</th>
                <th scope="col">Timestamp</th>
            </tr>
        </thead>
        <tbody>
            @foreach (OrderState item in Model.OrderStateList)
            {
                <tr>
                    <th scope="row">@item.OrderStateId</th>
                    <td>@item.State</td>
                    <td>@item.Date</td>
                    <td>@item.TimeStamp</td>
                </tr>
            }
        </tbody>
    </table>
    <br />
    <h4 class="text-center">State where orders are placed from - Chart</h4>
    <div id="chart_div3"></div>

    <script>google.charts.load('current', { packages: ['corechart', 'bar'] });
        google.charts.setOnLoadCallback(drawMaterial);

        function drawMaterial() {
            var data = new google.visualization.DataTable();
            var view_model = @Html.Raw(Json.Serialize(Model.TotalOrdersInState));
            data.addColumn('string', 'State');
            data.addColumn('number', 'Number of Orders Placed');

            for (const [key, value] of Object.entries(view_model)) {
                data.addRows([
                    [key, value],
                ]);
            }

            var options = {
                title: 'States where orders are placed from'
            };

            var materialChart = new google.charts.Bar(document.getElementById('chart_div3'));
            materialChart.draw(data, options);
        }</script>
</body>
